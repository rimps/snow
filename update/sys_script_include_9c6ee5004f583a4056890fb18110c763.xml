<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_jade_jconnect.POPULATE_SFDC_CUSTOMER_CASE_INBOUND</api_name>
        <client_callable>false</client_callable>
        <description>Get Cases from Salesforce</description>
        <name>POPULATE_SFDC_CUSTOMER_CASE_INBOUND</name>
        <script><![CDATA[var POPULATE_SFDC_CUSTOMER_CASE_INBOUND = Class.create();
var jadeUtility;
var jadeConnectLogger;
POPULATE_SFDC_CUSTOMER_CASE_INBOUND.prototype = {
    
	initialize: function() {
		jadeUtility= new global.JadeUtility();
		jadeConnectLogger = new x_jade_jconnect.JadeConnectLogger();
	},
	
	process: function(object) {
		var gr = new GlideRecord('x_jade_jconnect_connection');
		gr.addQuery('application.name','CONTAINS','SFDC');
		gr.query();
		while(gr.next()) {
			try {
				
				this.getResponse(gr,object);
				
			} catch(ex) {
				var message = ex.getMessage();
				jadeConnectLogger.info("JadeConnect : POPULATE_SFDC_CUSTOMER_CASE_INBOUND : message: "+message);
			}
			
		}
	},
	getResponse :function(gr,object)
	{
		var r = new sn_ws.RESTMessageV2('x_jade_jconnect.JadeConnect : SFDC GetCases', 'get');
		r.setStringParameter('access_token', gr.access_token);
		r.setStringParameter('instance_url', gr.url);
		var query = 'select id from case';
		// var query = object.condition;
		r.setStringParameter('query', query);
		var response = r.execute();
		var responseBody = response.getBody();
		var httpStatus = response.getStatusCode();
		jadeConnectLogger.info("JadeConnect : POPULATE_SFDC_CUSTOMER_CASE_INBOUND : Total Size : "+responseBody.totalSize+'**'+httpStatus);
		this.getData(responseBody,httpStatus,gr,object);
	},
	
	getData: function(responseBody,httpStatus,gr,object)
	{
		if(httpStatus < 300) {
			
			//create inbound transaction record
			 var trans_sys_id=this.insertRecordInTransationTable(responseBody,object);
			var json = new global.JSON();
			responseBody = json.decode(responseBody);
	
			jadeConnectLogger.info("JadeConnect : POPULATE_SFDC_CUSTOMER_CASE_INBOUND : Total Size : "+responseBody.totalSize);
			if(responseBody.totalSize > 0) {
				var data1 = responseBody.records;
				for(var i=0; i<data1.length; i++) {
					try {
						jadeConnectLogger.info("Pulling data for case id: "+data1[i].Id);
						var restMessage = new sn_ws.RESTMessageV2('x_jade_jconnect.JadeConnect : SFDC GetCaseById', 'get');
						restMessage.setStringParameter('access_token', gr.access_token);
						restMessage.setStringParameter('instance_url', gr.url);
						restMessage.setStringParameter('case_id', data1[i].Id);
						var response = restMessage.execute();
						var responseBody1 = response.getBody();
						var httpStatus1 = response.getStatusCode();
						
						if(httpStatus1 < 300) {
							this.insetRecordsInStagingTable(responseBody1);
							this.updateTransactionStatus(trans_sys_id,'parsed');
							
						}
						else {
							jadeConnectLogger.info("JadeConnect : POPULATE_SFDC_CUSTOMER_CASE_INBOUND : Individual case fetch failed");
						}
					} catch(ex) {
						jadeConnectLogger.info("JadeConnect : POPULATE_SFDC_CUSTOMER_CASE_INBOUND : Exception: "+ex);
						this.updateTransactionStatus(trans_sys_id,'failed');
					}
					
				}
			}
		}
	},
	
	insertRecordInTransationTable : function(responseBody,object)
	{
		var grTansac = new GlideRecord("x_jade_jconnect_transaction");
		grTansac.initialize();
		grTansac.integration = object.integration;
		jadeConnectLogger.info("JadeConnect : POPULATE_SFDC_CUSTOMER_CASE_INBOUND : Integration "+object.integration);
		grTansac.run_time = object.runTime;
		jadeConnectLogger.info("JadeConnect : POPULATE_SFDC_CUSTOMER_CASE_INBOUND : Time "+object.runTime);
		grTansac.status = "new";
		grTansac.job = object.job;
		jadeConnectLogger.info("JadeConnect : POPULATE_SFDC_CUSTOMER_CASE_INBOUND : JobName :"+object.job);
		grTansac.message = responseBody;
		trans_sys_id = grTansac.insert();
		jadeConnectLogger.info("JadeConnect : POPULATE_SFDC_CUSTOMER_CASE_INBOUND : Got List of new/updated ids"+trans_sys_id);
		return trans_sys_id;
	},
	
	insetRecordsInStagingTable :function(responseBody1)
	{
		jadeConnectLogger.info("JadeConnect : POPULATE_SFDC_CUSTOMER_CASE_INBOUND : Individual Case: "+responseBody1);
		var json = new global.JSON(); 
		responseBody1 = json.decode(responseBody1);
		var sdf = new GlideRecord("u_x_jade_jconnect_sfdc_customer_case_to_sn_customerservice_case_data_fields");
		sdf.initialize();
		for(var j in responseBody1) {
			sdf["u_" + j.toLowerCase()] = responseBody1[j];
		}
		sdf.transaction = trans_sys_id;
		sdf.transaction_status = "new";
		sdf.insert();
	},
	
	updateTransactionStatus : function(trans_sys_id,traStatus)
	{
		var grTansac = new GlideRecord("x_jade_jconnect_transaction");
		grTansac.addQuery('sys_id',trans_sys_id);
		grTansac.query();
		if(grTansac.next())
			{
				grTansac.status=traStatus;
			}
		grTansac.update();
	},
	
    type: 'POPULATE_SFDC_CUSTOMER_CASE_INBOUND'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>siddhartha.kadiyala</sys_created_by>
        <sys_created_on>2017-01-09 00:20:59</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>9c6ee5004f583a4056890fb18110c763</sys_id>
        <sys_mod_count>9</sys_mod_count>
        <sys_name>POPULATE_SFDC_CUSTOMER_CASE_INBOUND</sys_name>
        <sys_package display_value="JadeConnect" source="x_jade_jconnect">644700fb13df1a00b71a7d004244b0a2</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="JadeConnect">644700fb13df1a00b71a7d004244b0a2</sys_scope>
        <sys_update_name>sys_script_include_9c6ee5004f583a4056890fb18110c763</sys_update_name>
        <sys_updated_by>neeru</sys_updated_by>
        <sys_updated_on>2017-03-29 08:02:20</sys_updated_on>
    </sys_script_include>
</record_update>
