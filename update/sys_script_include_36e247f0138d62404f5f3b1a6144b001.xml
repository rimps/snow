<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_jade_jconnect.POPULATE_JIRA_INBOUND</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>POPULATE_JIRA_INBOUND</name>
        <script><![CDATA[var POPULATE_JIRA_INBOUND = Class.create();
var jadeConnectLogger;
var jadeUtility;
POPULATE_JIRA_INBOUND.prototype = {
	initialize: function() {
		jadeConnectLogger = new x_jade_jconnect.JadeConnectLogger();
		jadeUtility = new global.JadeUtility();
	},
	
	process: function(object) {
		var gr = new GlideRecord('x_jade_jconnect_connection');
		gr.addQuery('application.name','JIRA');
		gr.query();
		while(gr.next()) {
			try {
				
				var checkRes = this.getResponse(gr,object);
				if (!checkRes)
					break;
				
			} catch(ex) {
				var message = ex.getMessage();
				jadeConnectLogger.info("JadeConnect :POPULATE_JIRA_INBOUND :"+message);
				
			}
			
		}
	},
	getResponse :function(gr,object)
	{
		var r = new sn_ws.RESTMessageV2('x_jade_jconnect.JadeConnect : JIRA GetIssues', 'get');
		//r.setStringParameter('access_token', gr.access_token);
		r.setStringParameterNoEscape('instance_url', gr.url);
		//var query = '';
		 var query = object.filterCondition;
		r.setStringParameterNoEscape('jql_query', query);
		gs.info(query);
		var response = r.execute();
		var responseBody = response.getBody();
		gs.info('Richa:'+responseBody);
		var httpStatus = response.getStatusCode();
		if(httpStatus>300)
			{
				var err = new GlideRecord('u_errors');
				err.initialize();
				err.u_error_description="Error in connection";
				err.u_response= "Error in connection. Check your credentials.";
				err.u_integration=object.integration;
				var integrationFlowDAO = new global.integrationFlowDAO();
				integrationFlowDAO.insertRecordsInTable(err);
				return false;
			}else{
				this.getData(responseBody,httpStatus,gr,object);
				return true;
			}
	},
	getData: function(responseBody,httpStatus,gr,object)
	{
		if(httpStatus < 300) {
			
			//create inbound transaction record
	 var trans_sys_id =this.insertRecordInTransationTable(responseBody,object);
			var json = new global.JSON();
			responseBody = json.decode(responseBody);
			//jadeConnectLogger.info(responseBody);
			jadeConnectLogger.info("JadeConnect :POPULATE_JIRA_INBOUND : Total Size : "+responseBody.total);
			if(responseBody.total > 0) {
				var data1 = responseBody.issues.length;
				var data=responseBody.issues;
				for(var i=0; i<data1; i++) {
					try {
						jadeConnectLogger.info("JadeConnect :POPULATE_JIRA_INBOUND : Pulling data for issue id: "+data[i].id);
						var restMessage = new sn_ws.RESTMessageV2('x_jade_jconnect.JadeConnect : JIRA GetIssueById', 'get');
						restMessage.setStringParameter('access_token', gr.access_token);
						restMessage.setStringParameter('instance_url', gr.url);
						restMessage.setStringParameter('issue_key', data[i].id);
						var response = restMessage.execute();
						var responseBody1 = response.getBody();
						var httpStatus1 = response.getStatusCode();
						gs.info("res= "+responseBody1);
						if(httpStatus1 < 300) {
							this.insetRecordsInStagingTable(responseBody1);
							this.updateTransactionStatus(trans_sys_id,'parsed');
							
						}
						else {
							jadeConnectLogger.info("JadeConnect :POPULATE_JIRA_INBOUND : Individual issue fetch failed");
						}
					} catch(ex) {
						jadeConnectLogger.info("JadeConnect :POPULATE_JIRA_INBOUND : Exception: "+ex);
						this.updateTransactionStatus(trans_sys_id,'failed');
					}
					
				}
			}
		}
	},
	insertRecordInTransationTable : function(responseBody,object)
	{
		var grTansac = new GlideRecord("x_jade_jconnect_transaction");
		grTansac.initialize();
		grTansac.integration = object.integration;
		jadeConnectLogger.info("JadeConnect :POPULATE_JIRA_INBOUND : Integration "+object.integration);
		grTansac.run_time = object.runTime;
		jadeConnectLogger.info("JadeConnect :POPULATE_JIRA_INBOUND : Time "+object.runTime);
		grTansac.status = "new";
		grTansac.job = object.job;
		jadeConnectLogger.info("JadeConnect :POPULATE_JIRA_INBOUND : JobName :"+object.job);
		grTansac.message = responseBody;
		trans_sys_id = grTansac.insert();
		jadeConnectLogger.info("JadeConnect :POPULATE_JIRA_INBOUND : Got List of new/updated ids"+trans_sys_id);
		return trans_sys_id;
	},
	insetRecordsInStagingTable :function(responseBody1)
	{
		var arrCom='';
		var com='';
		var removeLastComa='';
		jadeConnectLogger.info("JadeConnect :POPULATE_JIRA_INBOUND : Individual issue: "+responseBody1);
		//jadeConnectLogger.info("JadeConnect :POPULATE_JIRA_INBOUND : Individual issue: "+responseBody1.fields.get('customfield_10016'));
		var json = new global.JSON(); 
		responseBody1 = json.decode(responseBody1);
		var str= JSON.stringify(responseBody1.fields.comment);
		gs.info("stringg ="+str);
		var myObj = JSON.parse(str);
		if(myObj.comments!='')
		{
			var len= myObj.comments.length;
			for(var j=0;j<len;j++)
			{
				gs.info("j= "+j);
		var str2=JSON.stringify(myObj.comments[j]);
		gs.info("str2"+str2);
		var obj2 = JSON.parse(str2);
		gs.info("obj2="+obj2);
		var array = Object.keys(myObj.comments[j]);
		gs.info("comments="+obj2[array[3]]);
	    gs.info("date neeru="+obj2[array[6]]);
				var date =obj2[array[6]];
				//var checkDate= new global.check_date();
			//var checkDate1=checkDate.dateCheck(obj2[array[6]]);
				//if(checkDate1)
				//	{
		 arrCom=arrCom+obj2[array[3]]+"*";
				//	}
			}
			
			 com=arrCom.split('*').join(',');
			removeLastComa=jadeUtility.subStr(com,0,jadeUtility.lastIndexOf(com,","));
			gs.info("removeLastComa ="+removeLastComa);
			
		}
	
		var sdf = new GlideRecord("u_x_jade_jconnect_jira_to_incident_data_fields");
		sdf.initialize();
// 		var arr = responseBody1.fields.toString().split(',');
// 		for(var j=0 ; j<arr.length;j++) {
// 			var fieldValue = arr[j].toString().split(":");
// 			gs.info("fieldvalue"+fieldValue[0].id);
// 		}
			/*sdf["u_" + fieldValue[0].toLowerCase()] = fieldValue[1];
		}*/
		sdf["u_issuetype"] = responseBody1.fields.issuetype;
		sdf["u_summary"] = responseBody1.fields.summary;
		sdf["u_status"] = responseBody1.fields.status.name;
		sdf["u_priority"] = responseBody1.fields.priority.name;
		sdf["u_description"] = responseBody1.fields.description;
		sdf["u_id"] = responseBody1.key;
		sdf["u_issuekey"] = responseBody1.key;
		sdf["u_comment"] = removeLastComa;
		sdf.transaction = trans_sys_id;
		sdf.transaction_status = "new";
		sdf.insert();
	},
	updateTransactionStatus : function(trans_sys_id,traStatus)
	{
		var grTansac = new GlideRecord("x_jade_jconnect_transaction");
		grTansac.addQuery('sys_id',trans_sys_id);
		grTansac.query();
		if(grTansac.next())
			{
				grTansac.status=traStatus;
			}
		grTansac.update();
	},
	type: 'POPULATE_JIRA_INBOUND'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>siddhartha.kadiyala</sys_created_by>
        <sys_created_on>2016-08-03 01:08:15</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>36e247f0138d62404f5f3b1a6144b001</sys_id>
        <sys_mod_count>201</sys_mod_count>
        <sys_name>POPULATE_JIRA_INBOUND</sys_name>
        <sys_package display_value="JadeConnect" source="x_jade_jconnect">644700fb13df1a00b71a7d004244b0a2</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="JadeConnect">644700fb13df1a00b71a7d004244b0a2</sys_scope>
        <sys_update_name>sys_script_include_36e247f0138d62404f5f3b1a6144b001</sys_update_name>
        <sys_updated_by>neeru</sys_updated_by>
        <sys_updated_on>2017-05-04 06:43:18</sys_updated_on>
    </sys_script_include>
</record_update>
