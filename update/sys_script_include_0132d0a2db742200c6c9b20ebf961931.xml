<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_jade_jconnect.integrationFlowInboundService</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>integrationFlowInboundService</name>
        <script><![CDATA[var integrationFlowInboundService = Class.create();
var jadeUtility;
var jadeConnectLogger;
integrationFlowInboundService.prototype = {
	initialize: function() {
		jadeUtility= new global.JadeUtility();
		jadeConnectLogger = new x_jade_jconnect.JadeConnectLogger();
	},
	/*
	* @ service :
	* Input : tablename,adapterName and mappedTo table name.
	* Output : None.
	* Description : Service is the main function in this service scriptinclude. It will internally call all other methods
	*				according to the condition.
	*/
	service: function(table_name,adapterName,mappedTo){
		jadeConnectLogger.info("JadeConnect : integrationFlowInboundService : Entry in service() ");
		var adapterNameCopy = '';
		var tableFlag=this.checkTableExistence(table_name);
		gs.info("Table Exist : "+tableFlag);
		if(tableFlag){			
			this.createModuleIfNotPresent(table_name,adapterName);
			this.createStagingBusinessRuleIfNotPresent(table_name,adapterName,mappedTo);
		}
		else{
			
			this.createStagingTable(table_name,adapterName);
			
			this.deleteReadRecordACLRole(table_name);
			
			this.createFieldsInStagingTable(table_name,adapterName,mappedTo);
			
			//this.createDeleteBusinessRule(table_name.toLowerCase(),adapterName,applicationName.toUpperCase());
			
			if(jadeUtility.indexOf(adapterName," ") != -1)
				adapterNameCopy = adapterName.toString().split(' ').join('_');
			
			this.createBusinessRule(jadeUtility.toLowerCase(table_name),jadeUtility.toUpperCase(adapterNameCopy));
			var lastIndex = jadeUtility.lastIndexOf(adapterName,' ');
			jadeConnectLogger.info("JadeConnect : integrationFlowInboundService : Last index of : "+lastIndex+" : Adapter name : "+adapterName);
			jadeConnectLogger.info("JadeConnect : integrationFlowInboundService : Last part  Adapter : "+jadeUtility.subStr(adapterName,0,lastIndex));
			this.createTransactionModule(jadeUtility.toLowerCase(table_name),jadeUtility.subStr(adapterName,0,lastIndex),adapterName);
			
			this.createCorrelationTable(mappedTo,adapterName);
			jadeConnectLogger.info("JadeConnect : integrationFlowInboundService : Exit from service() ");			
		}},
		/*
		* @deleteReadRecordACLRole : 
		* Input : tablename
		* Output : None.
		* Description : This method will delete all acl roles from sys_security_acl table, which are associated with the current tablename.
		* 				It will interenally called DAO layer to perform DB operations.
		*/
		deleteReadRecordACLRole: function(table_name){
			jadeConnectLogger.info("JadeConnect : integrationFlowInboundService : Entry in deleteReadRecordACLRole.");
			var acl = new GlideRecord('sys_security_acl');
			acl.addQuery('operation','read');
			acl.addQuery('name',jadeUtility.toLowerCase(table_name));
			acl.query();
			if(acl.next()){
				var  role= new GlideRecord('sys_security_acl_role');
				role.addQuery('sys_security_acl',acl.sys_id);
				role.query();
				if(role.next())
					var integrationFlowDAO = new global.integrationFlowDAO();
				integrationFlowDAO.deleteReadRecordACLRole(role);
			}
		},
		/*
		* @formTableName : 
		* Input : adapterName,MappedTo tablename.
		* Output : Dyanamicaaly created intermediate table.
		* Description : In this method the adpatername and mappedTo table name process together to get the final intermediate tablename
		*/
		formTableName: function(adapterName,mappedTo) {
			jadeConnectLogger.info("JadeConnect : integrationFlowInboundService : Entry in formTableName.");
			var adapterNameWithoutDirection = jadeUtility.subStr(adapterName,0, jadeUtility.lastIndexOf(adapterName," "));
								
			if(jadeUtility.indexOf(adapterNameWithoutDirection," ") != -1)
				adapterNameWithoutDirection = adapterNameWithoutDirection.toString().split(' ').join('_');
						
			var tableNameDemo =jadeUtility.trimVariable(adapterNameWithoutDirection)+"_to_"+jadeUtility.trimVariable(mappedTo);
								
			var finaltableName = 'u_x_jade_jconnect_'+tableNameDemo+'_data_fields';
			
			var table_name = jadeUtility.toLowerCase(finaltableName);//finaltableName.toLowerCase();
			jadeConnectLogger.info("JadeConnect : integrationFlowInboundService : Intermediate TableName :"+table_name);			
			return table_name;
			
		},
		/*
		* @checkTableExistence : 
		* Input : intermediate tablename.
		* Output : True/False.
		* Description : It will check wheather the passed tablename already exists in sys_db_object table or not.
		* If present returns True, else False.
		*/	
		checkTableExistence : function(table_name){
			jadeConnectLogger.info("JadeConnect : integrationFlowInboundService : Entry in checkTableExistence.");
			var dup = new GlideRecord('sys_db_object');
			dup.addQuery('name', table_name);
			dup.query();
			if (dup.hasNext()) {
				jadeConnectLogger.info("JadeConnect : integrationFlowInboundService : "+gs.getMessage('** Table name {0} is already in use', table_name));
				//gs.info(gs.getMessage('** Table name {0} is already in use', table_name));
				return true;
			}else{
				return false;
			}
		},
		/*
		* @createModuleIfNotPresent : 
		* Input :  tablename and adapterName.
		* Output : None
		* Description : It will create modules of the respective type (Inbound or Outbound). Firstly it will check for it 
		* If present do nothing else create those modules.
		*/
		createModuleIfNotPresent: function(table_name,adapterName){
			jadeConnectLogger.info("JadeConnect : integrationFlowInboundService : Entry in createModuleIfNotPresent.");
			var gr = new GlideRecord('sys_app_module');
			gr.addQuery('name',table_name);
			var ord=gr.addQuery('order','IN','410,411,412,413,414,415,416,417');
			ord.addOrCondition('order','IN','426,427,428,429,430,431,432,433');
			ord.addOrCondition('order','IN','442,443,444,445,446,447,448,449');
			ord.addOrCondition('order','IN','458,459,460,461,462,463,464,465');
			ord.addOrCondition('order','IN','474,475,476,477,478,479,480,481');
			ord.addOrCondition('order','IN','490,491,492,493,494,495,496,497');
			ord.addOrCondition('order','IN','506,507,508,509,510,511,512,513');
			ord.addOrCondition('order','IN','522,523,524,525,526,527,528,529');
			ord.addOrCondition('order','IN','538,539,540,541,542,543,544,545');
			ord.addOrCondition('order','IN','554,555,556,557,558,559,560,561');
			
			gr.query();
			if(gr.getRowCount() >1){
				jadeConnectLogger.info("JadeConnect : integrationFlowInboundService : Modules already Exist!!!.");
			}else{
				jadeConnectLogger.info("JadeConnect : integrationFlowInboundService : No module found.");
				this.createTransactionModule(jadeUtility.toLowerCase(table_name),jadeUtility.subStr(adapterName,0, jadeUtility.lastIndexOf(adapterName," ")),adapterName);
			}
			
		},
		/*
		* @createStagingBusinessRuleIfNotPresent : 
		* Input :  tablename,adapterName and mappedTo table name.
		* Output : None
		* Description : It will create businessrule on the intermediate table of the respective type (Inbound or Outbound). Firstly it will check for it 
		* If present do nothing else create those Businessrule.
		*/
		createStagingBusinessRuleIfNotPresent: function(table_name,adapterName,mappedTo){
			jadeConnectLogger.info("JadeConnect : integrationFlowInboundService : Entry in createStagingBusinessRuleIfNotPresent.");
			var busRule = new GlideRecord('sys_script');
			busRule.addQuery('collection',table_name);
			var adapterUpper = jadeUtility.toUpperCase(adapterName);
			adapterUpper = adapterUpper.toString().split(' ').join('_');
			busRule.addQuery('name','PROCESS_'+adapterUpper);
			busRule.query();
			jadeConnectLogger.info("JadeConnect : integrationFlowInboundService : getRowCount"+busRule.getRowCount());
			if(busRule.getRowCount() >= 1){
				jadeConnectLogger.info("JadeConnect : integrationFlowInboundService : Businessrules already exist!!!.");
			}else{
				jadeConnectLogger.info("JadeConnect : integrationFlowInboundService : No Businessrule found,Create them.");
				this.createBusinessRule(table_name,adapterUpper);
			}
		},
		/*
		* @createStagingTable : 
		* Input :   adapterName and table name .
		* Output : None
		* Description : It will create intermediate table while creating one fresh integration.
		* The intermediate table will extends Transaction Detail table in the Global scope.
		*/
		createStagingTable: function(table_name,adapterName){
			jadeConnectLogger.info("JadeConnect : integrationFlowInboundService : Entry in createStagingTable() ");
			var lastIndex = jadeUtility.lastIndexOf(adapterName," ");
			var adapterNameWithoutDirection = jadeUtility.subStr(adapterName,0,lastIndex);
							
			if(jadeUtility.indexOf(adapterNameWithoutDirection," ") != -1)
				adapterNameWithoutDirection = adapterNameWithoutDirection.toString().split(' ').join('_');
			
			var tabrec=new GlideRecord('sys_db_object');
			tabrec.newRecord();
			tabrec.name = jadeUtility.toLowerCase(table_name);
			tabrec.create_access = 'true';
			tabrec.read_access='true';
			tabrec.update_access='true';
			jadeUtility.setDisplayValue(tabrec,'access','public');
			jadeUtility.setDisplayValue(tabrec,'sys_scope','Global');
			jadeUtility.setDisplayValue(tabrec,'super_class','Transaction Detail');
			var trimadapterNameWithoutDirection = jadeUtility.trimVariable(adapterNameWithoutDirection);
			tabrec.label = jadeUtility.toUpperCase(trimadapterNameWithoutDirection);
			
			tabrec.create_access_controls = true;
			jadeUtility.setDisplayValue(tabrec,'user_role','x_jade_jconnect.jade_admin');
			var integrationFlowDAO = new global.integrationFlowDAO();
			jadeConnectLogger.info("JadeConnect : integrationFlowInboundService : Before entry in DAO.");
			integrationFlowDAO.insertRecordsInTable(tabrec);
			jadeConnectLogger.info("JadeConnect : integrationFlowInboundService : Successfully Create Staging Table.");
		},
		/*
		* @createFieldsInStagingTable : 
		* Input :   adapterName,table name and mappedTo table name .
		* Output : None
		* Description : It will call create field method internally and get all the list of fields from another script include.
		*/	
		createFieldsInStagingTable: function(table_name,adapterName,mappedTo){
			jadeConnectLogger.info("JadeConnect : integrationFlowInboundService : Entry in creatingFieldsInStagingTable.");
			var scriptName = jadeUtility.toLowerCase(adapterName)+"_fieldPopup";
			if(jadeUtility.indexOf(scriptName," ") != -1)
				scriptName = scriptName.toString().split(' ').join('_');
		 gs.info("script name=="+scriptName);
			var gr = new global.GetWrapperForName();
			var wrapperType = gr.getWrapperType(scriptName);
			jadeConnectLogger.info("JadeConnect : integrationFlowInboundService : WrapperType name : "+wrapperType);
			var obj = new wrapperType();
			var response = obj.getSourceFields();
					
			jadeConnectLogger.info("JadeConnect : integrationFlowInboundService : Response of fields from Outer application.");
			
			this.createSourceFields(response,table_name,mappedTo);
			
		},
		/*
		* @createSourceFields : 
		* Input :   list of name~value pairs, table-name and mappedTo table name.
		* Output : None
		* Description : It will ccreate fields in the intermediate table by calling the respective DAO method.
		*/
		createSourceFields: function(response,table_name,mapped){
			gs.info("table name ======"+table_name);
			jadeConnectLogger.info("JadeConnect : integrationFlowInboundService : Entry in createSourceField.");
			var fields = response.toString().split(",");
			for(var i=0; i<fields.length; i++) {
				var item = fields[i].toString().split("~");
				var tabcol=new GlideRecord('sys_dictionary');
				tabcol.newRecord();
				jadeUtility.setDisplayValue(tabcol,"internal_type",'String');
				tabcol.name= table_name.toLowerCase();
				tabcol.column_label=item[0];
				tabcol.element=item[1];
				tabcol.max_length='250';
				var integrationFlowDAO = new global.integrationFlowDAO();
				integrationFlowDAO.insertRecordsInTable(tabcol);
			}
			var tabcol1=new GlideRecord('sys_dictionary');
			tabcol1.newRecord();
			jadeUtility.setDisplayValue(tabcol1,"internal_type",'Reference');
			tabcol1.name=jadeUtility.toLowerCase(table_name);
			tabcol1.column_label= mapped;
			tabcol1.element=mapped;
			tabcol1.max_length='250';
			tabcol1.reference = mapped;
			integrationFlowDAO.insertRecordsInTable(tabcol1);
			jadeConnectLogger.info("JadeConnect : integrationFlowInboundService : Successfully created all fields.");
			var gr= new GlideRecord('sys_dictionary');
			gr.addQuery('name',table_name);
			gr.addQuery('element','u_id');
			gr.query();
			var count=gr.getRowCount();
			
			if(count==0)
				{
					gr.name = table_name;
					gr.internal_type = 'String';
					gr.column_label='id';
					gr.element='u_id';
					gr.max_length=40;
				var integrationFlowDAO = new global.integrationFlowDAO();
					integrationFlowDAO.insertRecordsInTable(gr);
				}
		},
		/*
		* @createBusinessRule : 
		* Input :   table name and adpater name.
		* Output : None
		* Description : It will create businessrule in the intermediate table by calling the respective DAO method in global scope.
		*/
		createBusinessRule: function(table_name,adapterName){
			jadeConnectLogger.info("JadeConnect : integrationFlowInboundService : Entry in createBusinessRule.");
			var busRule = new GlideRecord('sys_script');
			busRule.initialize();
			busRule.collection=table_name;
			busRule.name="PROCESS_"+adapterName;
			busRule.action_insert=true;
			busRule.active=true;
			busRule.advanced=true;
			busRule.when='after';
			jadeUtility.setDisplayValue(busRule,'sys_scope','Global');
			busRule.condition='current.transaction.integration.direction=="inbound"';
			var script = '(function onAfter(current, previous) {var gr = new x_jade_jconnect.PROCESS_DATA_FROM_ADAPTER_INBOUND();gr.processData(current, current.transaction.integration);})(current, previous);';
			busRule.script= script;
			var integrationFlowDAO = new global.integrationFlowDAO();
			integrationFlowDAO.insertRecordsInTable(busRule);
			jadeConnectLogger.info("JadeConnect : integrationFlowInboundService : Exit from createBusinessRule.");
		},
		/*
		* @createTransactionModule : 
		* Input :   table name and adpater name without space.
		* Output : None
		* Description : It will create Transaction module in the left navigation.
		*/
		createTransactionModule: function(table_name1,beforeSpace,adapterName){
			var orderM;
			jadeConnectLogger.info("JadeConnect : integrationFlowInboundService : Entry in createTransactionModule() ");
			jadeConnectLogger.info("JadeConnect : integrationFlowInboundService : Before space Entry value :  "+beforeSpace);
			           if(adapterName == 'SFDC ACCOUNT INBOUND'){
                          orderM=410;
                        }
                        if(adapterName == 'SFDC CONTACT INBOUND'){
                          orderM=426;
                        }
						 if(adapterName == 'SFDC CASE INBOUND'){
                          orderM=442;
                        }
			             if(adapterName == 'JIRA INBOUND'){
                          orderM=458;
                        }
			if(adapterName == 'SFDC CUSTOMER CONTACT INBOUND')
				{
					orderM=474;
				}
			if(adapterName == 'SFDC CUSTOMER ACCOUNT INBOUND')
				{
					orderM=490;
				}
			if(adapterName == 'SFDC CUSTOMER CASE INBOUND')
				{
					orderM=506;
				}
			if(adapterName == 'NETSUITE ASSET INBOUND')
				{
					orderM=522;
				}
			if(adapterName == 'JIRA REQUEST INBOUND')
				{
					orderM=538;
				}
			if(adapterName == 'JIRA TASK INBOUND')
				{
					orderM=554;
				}
			//var count = 412;
			var moduleInbound=["All","New","Inserted","Failed","Updated","Validation Failed","Transformation Failed"];
			var gr=new GlideRecord('sys_app_module');
			gr.newRecord();
			gr.title= beforeSpace+' - Inbound';
			jadeUtility.setDisplayValue(gr,'application','JadeConnect');
			jadeUtility.setDisplayValue(gr,'link_type','SEPARATOR');
			//gr.order=410;
			gr.order=orderM;
			orderM+=1;
			var integrationFlowDAO = new global.integrationFlowDAO();
			integrationFlowDAO.insertRecordsInTable(gr);
			gr.newRecord();
			gr.title= 'All';
			jadeUtility.setDisplayValue(gr,'application','JadeConnect');
			jadeUtility.setDisplayValue(gr,'link_type','LIST');
			gr.name = table_name1;
			//gr.order=411;
			gr.order=orderM;
			orderM+=1;
			integrationFlowDAO.insertRecordsInTable(gr);
			for(var i=1;i<moduleInbound.length;i++)
				{
				gr.newRecord();
				gr.title=moduleInbound[i];
				jadeUtility.setDisplayValue(gr,'application','JadeConnect');
				jadeUtility.setDisplayValue(gr,'link_type','LIST');
				gr.name = table_name1;
				gr.filter='transaction.integration.direction=inbound^transaction_status='+moduleInbound[i];
				gr.order=orderM;
				integrationFlowDAO.insertRecordsInTable(gr);
				orderM+=1;
			}
			
		},
		/*
		* @createCorrelationTable : 
		* Input :   mappedTo table name and adpater name.
		* Output : None
		* Description : It will create correlation table.
		* Name of table will be : ADAPTERNAME(Upper case)+"_CORRELATION"
		*/
		createCorrelationTable :function(mappedTo,adapterName){
			jadeConnectLogger.info("JadeConnect : integrationFlowInboundService : Entry in createCorrelationTable.");			
			var adapterNameWithoutDirection = jadeUtility.subStr(adapterName,0, jadeUtility.lastIndexOf(adapterName," "));
							
			if(jadeUtility.indexOf(adapterNameWithoutDirection," ") != -1)
				adapterNameWithoutDirection = adapterNameWithoutDirection.toString().split(' ').join('_');
			
			var table =new GlideRecord('sys_db_object');
			table.initialize();
			table.label=jadeUtility.toUpperCase(adapterNameWithoutDirection)+'_CORRELATION';
			var tabName = 'x_jade_jconnect_'+jadeUtility.toLowerCase(adapterNameWithoutDirection)+'_correlation';
			table.name= tabName.toString();
			jadeUtility.setDisplayValue(table,'sys_scope','Global');
			table.create_access = 'true';
			table.read_access='true';
			table.update_access='true';
			jadeUtility.setDisplayValue(table,'access','public');
			var integrationFlowDAO = new global.integrationFlowDAO();
			integrationFlowDAO.insertRecordsInTable(table);
			var internalType=["String","Reference","Choice"];
			var columnLabel=["Id",mappedTo+" id","Status"];
			var columnName=["id",mappedTo+"_id","status"];
			var dic =new GlideRecord('sys_dictionary');
			for(var i=0;i<3;i++)
				{
				dic.initialize();
				dic.name=table.name;
				jadeUtility.setDisplayValue(dic,'sys_scope','Global');
				dic.column_label=columnLabel[i];
				dic.element=columnName[i];
				dic.active=true;
				jadeUtility.setDisplayValue(dic,'internal_type',internalType[i]);
				if(dic.getDisplayValue('internal_type')=='Reference')
					{
					dic.reference=mappedTo;
				}
				integrationFlowDAO.insertRecordsInTable(dic);
			}
			var choiceLabel =["Begin","Failed","In-Process","pass","Transformation Failed","validation failed"];
			var choiceValue=["begin","failed","In-Process","pass","transformation failed","validation failed"];
			var choice =new GlideRecord('sys_choice');
			for(var j=0;j<6;j++)
				{
				choice.initialize();
				choice.name=table.name;
				choice.element='u_status';
				choice.label=choiceLabel[j];
				choice.value=choiceValue[j];
				choice.sequence=j+1;
				integrationFlowDAO.insertRecordsInTable(choice);
			}
		},
		
		
		type: 'integrationFlowInboundService'
	};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2016-07-26 12:27:22</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>0132d0a2db742200c6c9b20ebf961931</sys_id>
        <sys_mod_count>97</sys_mod_count>
        <sys_name>integrationFlowInboundService</sys_name>
        <sys_package display_value="JadeConnect" source="x_jade_jconnect">644700fb13df1a00b71a7d004244b0a2</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="JadeConnect">644700fb13df1a00b71a7d004244b0a2</sys_scope>
        <sys_update_name>sys_script_include_0132d0a2db742200c6c9b20ebf961931</sys_update_name>
        <sys_updated_by>neeru</sys_updated_by>
        <sys_updated_on>2017-04-26 04:40:56</sys_updated_on>
    </sys_script_include>
</record_update>
